// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.Arms.*;
import frc.robot.commands.Auton.*;
import frc.robot.commands.Autos.AutoBalance;
import frc.robot.commands.Drives.*;
import frc.robot.commands.LEDs.*;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.button.POVButton;
import frc.robot.Constants.AutoConstants;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a "declarative" paradigm, very little robot logic should
 * actually be handled in the {@link Robot} periodic methods (other than the
 * scheduler calls). Instead, the structure of the robot (including subsystems,
 * commands, and button mappings) should be declared here.
 */
public class RobotContainer {

    private static RobotContainer m_robotContainer = new RobotContainer();
    public final LightsSubsystem m_microController = new LightsSubsystem();
    public final NavX m_gyro = new NavX();
    public final Arm m_arm = new Arm();
    public final DriveTrain m_driveTrain = new DriveTrain();
    public final ServoSub m_servo = new ServoSub(9);
    public final ShuffleboardSub m_shuffle = new ShuffleboardSub(m_driveTrain, m_servo, m_arm);

    // Joysticks
    private final XboxController driverController = new XboxController(0);
    private final XboxController manipController = new XboxController(1);
    private SendableChooser<Command> m_chooser = new SendableChooser<>();

    public RobotContainer() {
        Shuffleboard.getTab("Automated").add(m_chooser)
                .withPosition(11, 0)
                .withSize(4, 1);

        m_chooser.addOption("Deliver To High",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm)));
        m_chooser.addOption("Loading Mobility Charge",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new LoadMobilityCharge(m_driveTrain), new AutoBalance(m_driveTrain)));
        m_chooser.addOption("MID Loading Mobility Charge",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToMidNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new LoadMobilityCharge(m_driveTrain), new AutoBalance(m_driveTrain)));
        m_chooser.addOption("Loading Mobility",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new LoadMobility(m_driveTrain)));
        m_chooser.addOption("Loading Mobility Aquire",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new LoadMobilityAquire(m_driveTrain)));
        m_chooser.addOption("MID Loading Mobility Aquire",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToMidNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new LoadMobilityAquire(m_driveTrain)));
        m_chooser.addOption("Loading Mobility Opp",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new LoadMobilityOpp(m_driveTrain)));
        m_chooser.addOption("Loading 2 Piece",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new BackUp(m_driveTrain), new ArmToHybridNode(m_arm)),
                        new OpenDoors(m_servo, m_arm), new WaitCommand(0.7), new CloseDoors(m_servo, m_arm),
                        new Loading2Piece(m_driveTrain)));
        m_chooser.addOption("Center Mobility Charge",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new CenterMobilityCharge(m_driveTrain), new AutoBalance(m_driveTrain)));
        m_chooser.addOption("NO SCORE Center Mobility Charge",
                new SequentialCommandGroup(new CenterMobilityCharge(m_driveTrain), new AutoBalance(m_driveTrain)));
        m_chooser.addOption("Center Mobility",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new CenterMobility(m_driveTrain)));
        m_chooser.addOption("Center Mobility Around Loading",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(5),
                        new CenterMobilityAroundLoading(m_driveTrain)));
        m_chooser.addOption("Center Mobility Around Opposite",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(5),
                        new CenterMobilityAroundOpposite(m_driveTrain)));
        m_chooser.addOption("Opposite Mobility Charge",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new OppositeMobilityCharge(m_driveTrain), new AutoBalance(m_driveTrain)));
        m_chooser.addOption("Opposite Mobility",
                new SequentialCommandGroup(
                        new ParallelCommandGroup(new ArmToHighNode(m_arm), new BackUpApproachGrid(m_driveTrain)),
                        new PartialOpen(m_servo, m_arm), new WaitCommand(0.5), new OpenDoors(m_servo, m_arm),
                        new WaitCommand(1),
                        new OppositeMobility(m_driveTrain)));
        m_chooser.addOption("Q4 Mobility ", new SequentialCommandGroup(new Q4Mobility(m_driveTrain)));
        m_chooser.addOption("Tune Rotation", new RotationTuning(m_driveTrain));
        m_chooser.addOption("Tune Translation", new TranslationTuning(m_driveTrain));

        SmartDashboard.putData(CommandScheduler.getInstance());
        configureButtonBindings();

        m_arm.setDefaultCommand(new StopArm(m_arm));
        m_driveTrain.setDefaultCommand(new Drive(m_driveTrain));
        m_chooser.setDefaultOption("None", new DontMove(m_driveTrain));
        SmartDashboard.putData("Auto Mode", m_chooser);
        setEventMap();
    }

    public static RobotContainer getInstance() {
        return m_robotContainer;
    }

    /**
     * Use this method to define your button->command mappings. Buttons can be
     * created by instantiating a {@link GenericHID} or one of its subclasses
     * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then
     * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
     */
    private void configureButtonBindings() {

        final JoystickButton xboxButtonLBumper = new JoystickButton(driverController,
                XboxController.Button.kLeftBumper.value);
        xboxButtonLBumper
                .onTrue(new ToggleOrientedDrive(m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final POVButton xboxButton180 = new POVButton(driverController, 180);
        xboxButton180.onTrue(new AutoBalance(m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton xboxButtonA = new JoystickButton(driverController, XboxController.Button.kA.value);
        xboxButtonA.onTrue(new TurnToAngle(0, m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton xboxButtonX = new JoystickButton(driverController, XboxController.Button.kX.value);
        xboxButtonX.onTrue(new TurnToAngle(-90, m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton xboxButtonY = new JoystickButton(driverController, XboxController.Button.kY.value);
        xboxButtonY.onTrue(new TurnToAngle(180, m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton xboxButtonB = new JoystickButton(driverController, XboxController.Button.kB.value);
        xboxButtonB.onTrue(new TurnToAngle(90, m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton manipXboxButtonLBumper = new JoystickButton(manipController,
                XboxController.Button.kLeftBumper.value);
        manipXboxButtonLBumper.onTrue(new LEDPurple(m_microController));

        final JoystickButton manipXboxButtonRBumper = new JoystickButton(manipController,
                XboxController.Button.kRightBumper.value);
        manipXboxButtonRBumper.onTrue(new LEDYellow(m_microController));

        final JoystickButton manipXboxButtonStart = new JoystickButton(manipController,
                XboxController.Button.kStart.value);
        manipXboxButtonStart.onTrue(new LEDOff(m_microController));

        final JoystickButton manipXboxButtonY = new JoystickButton(manipController, XboxController.Button.kY.value);
        manipXboxButtonY.onTrue(new SequentialCommandGroup(new ArmToHighNode(m_arm), new PartialOpen(m_servo, m_arm)));

        final JoystickButton manipXboxButtonB = new JoystickButton(manipController, XboxController.Button.kB.value);
        manipXboxButtonB.onTrue(new SequentialCommandGroup(new ArmToMidNode(m_arm), new PartialOpen(m_servo, m_arm)));

        final JoystickButton manipXboxButtonA = new JoystickButton(manipController, XboxController.Button.kA.value);
        manipXboxButtonA
                .onTrue(new SequentialCommandGroup(new ArmToHybridNode(m_arm), new PartialOpen(m_servo, m_arm)));

        final JoystickButton manipXboxButtonX = new JoystickButton(manipController, XboxController.Button.kX.value);
        manipXboxButtonX.onTrue(new SequentialCommandGroup(new CloseDoors(m_servo, m_arm),
                new LowerArm(m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf)));

        final POVButton manipXboxButton0 = new POVButton(manipController, 0);
        manipXboxButton0.whileTrue(new ArmToHighNode(m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
        manipXboxButton0.onFalse(new StopArm(m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final POVButton manipXboxButton180 = new POVButton(manipController, 180);
        manipXboxButton180.whileTrue(new SequentialCommandGroup(new CloseDoors(m_servo, m_arm),
                new LowerArm(m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf)));
        manipXboxButton180.onFalse(new StopArm(m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton manipXboxButtonBack = new JoystickButton(manipController,
                XboxController.Button.kBack.value);
        manipXboxButtonBack
                .whileTrue(new OpenDoors(m_servo, m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
        manipXboxButtonBack
                .whileFalse(new CloseDoors(m_servo, m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf)
                        .withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    }

    public void setEventMap() {
        AutoConstants.eventMap.put("ArmDown", new LowerArm(m_arm));
        AutoConstants.eventMap.put("CloseArm", new CloseDoors(m_servo, m_arm));
        AutoConstants.eventMap.put("OpenArm", new OpenDoors(m_servo, m_arm));
        AutoConstants.eventMap.put("AutoBalance", new AutoBalance(m_driveTrain));
    }

    public XboxController getdriverController() {
        return driverController;
    }

    public XboxController getmanipController() {
        return manipController;
    }

    /**
     * Use this to pass the autonomous command to the main {@link Robot} class.
     *
     * @return the command to run in autonomous
     */
    public Command getAutonomousCommand() {
        return m_chooser.getSelected();
    }

}
