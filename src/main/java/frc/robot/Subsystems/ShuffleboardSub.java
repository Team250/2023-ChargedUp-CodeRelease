// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.LimeLightConstants;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.RobotController;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.SendableCameraWrapper;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class ShuffleboardSub extends SubsystemBase {
    private DriveTrain m_driveTrain;
    private ServoSub m_servo;
    private Arm m_arm;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    * Not a physical subsystem, this subsystem handles Shuffleboard Initilization and Updates
    */
    public ShuffleboardSub(DriveTrain drive, ServoSub servo, Arm arm) {
        this.m_driveTrain = drive;
        this.m_servo = servo;
        this.m_arm = arm;

        Shuffleboard.getTab("Automated");
        ShuffleboardTab tab = Shuffleboard.getTab("Automated");
        tab.add(SendableCameraWrapper.wrap("LLCamera", "http://10.2.50.26:5800"))
                .withWidget(BuiltInWidgets.kCameraStream)
                .withPosition(4, 0)
                .withSize(6, 5);
        tab.addNumber("Tag X Coordinate", () -> LimeLight.getXCoord())
                .withPosition(0, 1);
        tab.addNumber("Tag Y Coordinate", () -> LimeLight.getYCoord())
                .withPosition(0, 2);
        tab.addNumber("Tag Visable", () -> LimeLight.isTag())
                .withPosition(0, 3);

    }

    @Override
    public void periodic() {
        SmartDashboard.putData(m_arm);
        SmartDashboard.putData(m_driveTrain);
        SmartDashboard.putNumber("Match Start", DriverStation.getMatchTime());

        // Drivetrain
        SmartDashboard.putString("TargetNode", m_driveTrain.getTargetNode());
        SmartDashboard.putString("TargetNode Location", LimeLightConstants.POSE_MAP.get(DriverStation.getAlliance())
                .get(m_driveTrain.getTargetNode()).toString());
        SmartDashboard.putNumber("Gyro pitch", m_driveTrain.getPitch());
        SmartDashboard.putNumber("Gyro yaw", m_driveTrain.getYaw());
        SmartDashboard.putNumber("Gyro roll", m_driveTrain.getRoll());
        SmartDashboard.putNumber("OffsetAngle", m_driveTrain.getFieldOffsetAngle());
        SmartDashboard.putBoolean("Field Oriented", m_driveTrain.getFieldOriented());
        SmartDashboard.putNumber("Front Left Velocity", m_driveTrain.getFrontLeft().getState().speedMetersPerSecond);
        SmartDashboard.putNumber("Front Right Velocity", m_driveTrain.getFrontRight().getState().speedMetersPerSecond);
        SmartDashboard.putNumber("Back Left Velocity", m_driveTrain.getBackLeft().getState().speedMetersPerSecond);
        SmartDashboard.putNumber("Back Right Velocity", m_driveTrain.getBackRight().getState().speedMetersPerSecond);
        SmartDashboard.putString("Odometry", m_driveTrain.getOdometry().getEstimatedPosition().toString());
        SmartDashboard.putNumber("Front Left Angle", m_driveTrain.getFrontLeft().getState().angle.getDegrees());
        SmartDashboard.putNumber("Front Right Angle", m_driveTrain.getFrontRight().getState().angle.getDegrees());
        SmartDashboard.putNumber("Back Left Angle", m_driveTrain.getBackLeft().getState().angle.getDegrees());
        SmartDashboard.putNumber("Back Right Angle", m_driveTrain.getBackRight().getState().angle.getDegrees());

        // Arm
        SmartDashboard.putNumber("Arm getPosition", m_arm.getCurrentPosition());
        SmartDashboard.putNumber("Arm Ouput Voltage", m_arm.getArmControllerAppliedOutputget());
        SmartDashboard.putNumber("Setpoint", m_arm.getSetpoint());

        // Servo
        SmartDashboard.putNumber("Servo Setpoint", m_servo.getSetAngle());
        SmartDashboard.putNumber("RIO 3.3v PWM Faults", RobotController.getFaultCount3V3());
        SmartDashboard.putNumber("RIO 5v PWM Faults", RobotController.getFaultCount5V());
        SmartDashboard.putNumber("RIO 6v PWM Faults", RobotController.getFaultCount6V());

        Shuffleboard.update();
    }
}